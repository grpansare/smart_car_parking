package com.parkease.controllers;


import java.io.File;
import java.io.IOException;
import java.net.http.HttpHeaders;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Duration;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseCookie;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;

import com.nimbusds.oauth2.sdk.token.RefreshToken;
import com.parkease.beans.ParkingUser;
import com.parkease.beans.User;
import com.parkease.beans.Vehicle;
import com.parkease.dao.ParkingUserRepo;
import com.parkease.dao.UserRepository;
import com.parkease.dtos.AuthResponse;
import com.parkease.dtos.TokenRefreshRequest;
import com.parkease.security.AuthRequest;
import com.parkease.security.JwtUtil;
import com.parkease.services.OtpService;
import com.parkease.services.ParkingUserService;
import com.parkease.services.RefreshTokenService;
import com.parkease.services.UserInfoService;

import jakarta.mail.MessagingException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import lombok.extern.java.Log;
@CrossOrigin(origins = "http://localhost:5173")
@RestController
@RequestMapping("/user")
public class UserController {

    @Autowired
    private UserInfoService service;

    @Autowired
    private JwtUtil jwtUtil;
    
    
    @Autowired
    private RefreshTokenService refreshTokenService;
    
    @Autowired
    private UserRepository repository;
    @Autowired
    private ParkingUserRepo parkingUserRepo;
    @Autowired
    private ParkingUserService parkingUserService;
    @Autowired
    private AuthenticationManager authenticationManager;
    private final String UPLOAD_DIR = System.getProperty("user.dir") + "/uploads/";

    

    @Autowired
    private UserInfoService userDetailsService;
    
    @Autowired
    private OtpService otpService;

    @GetMapping("/welcome")
    public String welcome() {
    	System.out.println("Welcomre");
        return "Welcome this endpoint is not secure";
    }
    
    @GetMapping("/success")
    public ResponseEntity<?> checkUser(HttpServletRequest request) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth != null && auth.isAuthenticated() && !(auth instanceof AnonymousAuthenticationToken)) {
            return ResponseEntity.ok().body("Authenticated");
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
    }

   
    @GetMapping("/profile")
    public ResponseEntity<?> getUserProfile(HttpServletRequest request) throws Throwable {
        System.out.println("in profile");
        try {
            String token = extractTokenFromRequest(request);
            if (token == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Token missing");
            }

            String email = jwtUtil.extractUsername(token.replace("Bearer ", ""));
            User user = repository.findByEmail(email)
                    .orElseThrow(() -> new UsernameNotFoundException("User not found"));
          
            AuthResponse response = new AuthResponse();
            response.setAccessToken(token);
            response.setFullname(user.getFullname());
            response.setEmail(user.getEmail());
            response.setContactno(user.getContactno());
            response.setProfileImage(user.getProfileImage());
            response.setUserId(user.getUserId());
            System.out.println(response);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid Token");
        }
    }

    // ✅ Extract JWT from Authorization Header or Cookie
    private String extractTokenFromRequest(HttpServletRequest
    		request) {
        String bearerToken = request.getHeader("Authorization");
        if (bearerToken != null && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7); // Remove "Bearer " prefix
        }

        if (request.getCookies() != null) {
            for (Cookie cookie : request.getCookies()) {
                if ("jwt".equals(cookie.getName())) {
                    return cookie.getValue();
                }
            }
        }
        return null;
    }

    @GetMapping("/test-auth")
    public ResponseEntity<String> testAuth() {
        return ResponseEntity.ok("JWT is working ✅");
    }

 

    

   

    @PostMapping("/send")
    public ResponseEntity<?> sendOtp(@RequestParam String email) throws MessagingException {
    	
    	User user=(User)repository.findByEmail(email).orElse(null);
    	if(user!=null) {
    		  otpService.sendOtp(user.getFullname(),email);
    		  return ResponseEntity.status(HttpStatus.OK).body("Otp sentsuccessfully");
    		  
    	}
      
    	 return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Invalid email address ");
    }

    @PostMapping("/verify")
    public boolean verifyOtp(@RequestParam String otp) {
        return otpService.validateOtp(otp) ;
    }
    @GetMapping("/admin/adminProfile")
    @PreAuthorize("hasAuthority('ROLE_ADMIN')")
    public String adminProfile() {
        return "Welcome to Admin Profile";
    }

    @PostMapping("/register")
    public ResponseEntity<?> register(@RequestBody ParkingUser user) {
       

        boolean isUserSaved = service.addUser(user);

        if (isUserSaved) {
            
            return ResponseEntity.status(HttpStatus.CREATED).body("Registered Successfully");
        } else {
           
            return ResponseEntity.status(HttpStatus.CONFLICT).body("Email already exists");
        }
    }
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody AuthRequest authRequest) throws Throwable {
        try {
            Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(authRequest.getEmail(), authRequest.getPassword())
            );

            if (authentication.isAuthenticated()) {
                UserDetails userDetails = service.loadUserByUsername(authRequest.getEmail());
                String accessToken = jwtUtil.generateAccessToken(userDetails);
                String refreshToken = refreshTokenService.createRefreshToken(userDetails.getUsername()).getToken();

                User user = repository.findByEmail(authRequest.getEmail())
                    .orElseThrow(() -> new UsernameNotFoundException("email not found"));

                AuthResponse response = new AuthResponse();
                response.setAccessToken(accessToken);
                response.setFullname(user.getFullname());
                response.setUserId(user.getUserId());
                response.setEmail(user.getEmail());
                response.setContactno(user.getContactno());

                // ✅ Use `secure(false)` for local testing (HTTP)
                ResponseCookie cookie = ResponseCookie.from("refreshToken", refreshToken)
                    .httpOnly(true)
                    .secure(false) // ✅ Set to true in production with HTTPS
                    .path("/")
                    .maxAge(Duration.ofDays(1))
                    .sameSite("Lax") // ✅ Safer for most cross-site cookie needs
                    .build();

                return ResponseEntity.ok()
                    .header(org.springframework.http.HttpHeaders.SET_COOKIE, cookie.toString())
                    .body(response);
            } else {
            	System.out.println("undkjsanfkjnlfk");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Map.of("message", "Invalid email or password"));
            }
        } catch (Exception e) {
        	
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                .body(Map.of("message", "Invalid email or password"));
        }
    }

    @GetMapping("/getvehiclesInfo/{email}")
    public ResponseEntity<?> getVehicles(@PathVariable String email) {
        // Normalize the email if necessary
        email = email.toLowerCase();

        // Find ParkingUser by email
        Optional<ParkingUser> parkingUserOpt = parkingUserRepo.findByEmail(email);
        
        // If no user is found, return a 404 response
        if (!parkingUserOpt.isPresent()) {
            System.out.println("User not found for email: " + email);
            return ResponseEntity.notFound().build();
        }

        // Get the ParkingUser object
        ParkingUser parkingUser = parkingUserOpt.get();
        System.out.println("Found parking user: " + parkingUser);

        // Get the list of vehicles associated with the user
        List<Vehicle> vehicles = parkingUser.getVehicles();

        // Return the list of vehicles in JSON format
        return ResponseEntity.ok(vehicles);
    }

    @PostMapping("/changepassword")
    public ResponseEntity<?> changePass(@RequestBody AuthRequest authRequest){
    	
    	boolean userUpdated=service.updatePassword(authRequest);
    	if(userUpdated) {
    		return new ResponseEntity<>("Password Updated Successfully",HttpStatus.OK);
    	}
    	return new ResponseEntity<>("Error in passowrd updating",HttpStatus.BAD_REQUEST);
    }
    
    @PatchMapping("/updateinfo/{email}")
    public ResponseEntity<?> updateInfo(@RequestBody User user, @PathVariable String email) {
        System.out.println("In update method");

        Optional<User> userop = repository.findByEmail(email);

        // ✅ Check if user exists
        if(userop.isPresent()) {
            System.out.println("User Found");
            User existingUser = userop.get();

            // ✅ Only update these fields (Ignore Password)
            if(user.getFullname() != null) {
                existingUser.setFullname(user.getFullname());
            }
            if(user.getContactno() != null) {
                existingUser.setContactno(user.getContactno());
            }
            if(user.getEmail() != null) {
                existingUser.setEmail(user.getEmail());
            }

            // ✅ DO NOT UPDATE PASSWORD 🚫
            // existingUser.setPassword(user.getPassword()); ❌

            // ✅ Save user without affecting password
            repository.save(existingUser);

            // ✅ Return ResponseEntity with 200 OK
            return ResponseEntity.ok("User Info Updated Successfully");
        }

        // ❌ Return 404 if user not found
        System.out.println("User Not Found");
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User Not Found");
    }
  
    
    @PostMapping("/addvehicle/{email}")
    public ResponseEntity<?> addVehicle(@RequestBody Vehicle vehicle,@PathVariable String email){
    	try {
    		List<Vehicle>vehicles=parkingUserService.addNewVehicle(vehicle,email);
    		return new ResponseEntity<>(vehicles,HttpStatus.CREATED);
    	}catch(Exception e) {
    		return new ResponseEntity<>("error addding vehicle",HttpStatus.BAD_REQUEST);
    	}
    }
    
    @PatchMapping("/uploadimage")
    public ResponseEntity<?> uploadFile(@RequestParam("file") MultipartFile file,
                                        @RequestParam("email") String email) {
        // ✅ Clean file name: Remove spaces & special characters
        String originalName = file.getOriginalFilename()
                                  .replaceAll("[\\s(){}]", "_");  // Replace spaces & special chars

        // ✅ Generate a unique file name
        String fileName = UUID.randomUUID().toString() + "_" + originalName;

        // ✅ Save file in the project directory
        String uploadDir = System.getProperty("user.dir") + "/uploads/";
        File dest = new File(uploadDir, fileName);

        try {
            if (!new File(uploadDir).exists()) {
                new File(uploadDir).mkdirs();
            }
            file.transferTo(dest);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error saving file");
        }

        // ✅ Save only the cleaned file name in the database
        User savedUser = service.saveImage(email, fileName);
        return savedUser != null
            ? ResponseEntity.ok("Image updated successfully")
            : ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Error updating profile");
    }

    @GetMapping("/uploads/{filename}")
    public ResponseEntity<Resource> getFile(@PathVariable String filename) throws IOException {
        Path filePath = Paths.get(System.getProperty("user.dir") + "/uploads/").resolve(filename);
        Resource resource = new UrlResource(filePath.toUri());

        if (!resource.exists() || !resource.isReadable()) {
            return ResponseEntity.notFound().build();
        }

        return ResponseEntity.ok()
            .contentType(MediaType.IMAGE_JPEG) // Adjust based on file type
            .body(resource);
    }

 // 🔄 Refresh Endpoint - no request body needed
    @PostMapping("/refresh")
    public ResponseEntity<?> refresh(@CookieValue(name = "refreshToken", required = false) String refreshToken) {
        if (refreshToken == null) {
        	System.out.println("missing refresh token");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Missing refresh token");
        }

        return refreshTokenService.findByToken(refreshToken)
                .map(refreshTokenService::verifyExpiration)
                .map(com.parkease.beans.RefreshToken::getUser)
                .map(user -> {
                    UserDetails userDetails = userDetailsService.loadUserByUsername(user.getUsername());
                    String newAccessToken = jwtUtil.generateAccessToken(userDetails);
                    return ResponseEntity.ok(new AuthResponse(newAccessToken, null));
                })
                .orElseThrow(() -> new RuntimeException("Invalid refresh token"));
    }

    // 🚪 Logout Endpoint - removes refresh token and clears cookie
    @PostMapping("/logout")
    public ResponseEntity<?> logout(@CookieValue(name = "refreshToken", required = false) String refreshToken) {
        if (refreshToken != null) {
            refreshTokenService.findByToken(refreshToken).ifPresent(token ->
                refreshTokenService.deleteByUser(token.getUser()));
        }

        ResponseCookie cookie = ResponseCookie.from("refreshToken", "")
                .httpOnly(true)
                .secure(true)
                .path("/api/auth/refresh")
                .maxAge(0)
                .sameSite("Strict")
                .build();

        return ResponseEntity.ok()
                .header(org.springframework.http.HttpHeaders.SET_COOKIE, cookie.toString())
                .body("Logged out successfully");
    }



}

