package com.parkease.services;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.parkease.beans.ParkingOwner;
import com.parkease.beans.ParkingSlot;
import com.parkease.beans.ParkingSpace;
import com.parkease.dao.ParkingOwnerRepo;
import com.parkease.dao.ParkingSpaceRepo;
import com.parkease.dtos.NominatimResponse;
import com.parkease.dtos.ParkingSpaceDto;
@Service
public class ParkingSpaceServiceImpl implements ParkingSpaceService{
	
	@Autowired
	public ParkingSpaceRepo parkingSpaceRepo;
	@Autowired
	public ParkingOwnerRepo parkingOwnerRepo;;
	 private final RestTemplate restTemplate=new RestTemplate();

	@Override
	public List<ParkingSpace> getByAddress(String location) {
		// TODO Auto-generated method stub
		return parkingSpaceRepo.findByAddressContainingIgnoreCase(location);
	}

	
	 public void bookParking(long slotNumber, long spaceId) {
	        ParkingSpace space = parkingSpaceRepo.findById( spaceId).get();
	           System.out.println(space.getAddress());
       
            List<ParkingSlot> slots=space.getParkingSlot();
            for(ParkingSlot slot:slots) {
            	if(slot.getSlotId()==slotNumber) {
            		slot.setAvailable(false);
            	}
            }
            space.setParkingSlot(slots);
            parkingSpaceRepo.save(space);
	   
	    }


	@Override
	public long bookRandomSlot(long spaceId) {
		ParkingSpace space = parkingSpaceRepo.findById( spaceId).get();
        System.out.println(space.getAddress());

     List<ParkingSlot> slots=space.getParkingSlot();
     ParkingSlot slot=null;
     Random random = new Random();
     while(true) {
     int randomNumber = random.nextInt(space.getTotalSlots()) + 1; // Generates a number between 1 and 90
     System.out.println("Random Number: " + randomNumber);
      slot=slots.get(randomNumber);
     if(slot.isAvailable()) {
    	slot.setAvailable(false) ;
    	break;
     }
     }
    
      
     space.setParkingSlot(slots);
     
     parkingSpaceRepo.save(space);
     if(slot!=null) {
    	 return slot.getSlotId();
     }
     return -1;
		
	}


	@Override
	public void cancelBooking(Long selectedSlot, long spaceId) {
		  ParkingSpace space = parkingSpaceRepo.findById( spaceId).get();
          System.out.println(space.getAddress());
          System.out.println(selectedSlot);
          
              
       List<ParkingSlot> slots=space.getParkingSlot();
       for(ParkingSlot slot:slots) {
       	if(slot.getSlotId()==selectedSlot) {
       		System.out.println("==========================================================");
       		slot.setAvailable(true);
       		
       	}
       	
       }
       space.setParkingSlot(slots);
       parkingSpaceRepo.save(space);
		
	}
	 public List<ParkingSpaceDto> findNearbyParking(double userLat, double userLon) {
	        List<ParkingSpace> spots = parkingSpaceRepo.findAll();

	        return spots.stream().map(spot -> {
	            double[] coords = getCoordinates(spot.getAddress());
	            double distance = haversine(userLat, userLon, coords[0], coords[1]);
	            ParkingSpaceDto dto= new ParkingSpaceDto(spot.getAddress(), coords[0], coords[1], distance);
	            
	            dto.setLotName(spot.getLotName());
	            dto.setNumberOfFloors(spot.getNumberOfFloors());
	            dto.setParkingSlot(spot.getParkingSlot());
	            dto.setPricingPerHour(spot.getPricingPerHour());
	            dto.setSpaceIdd(spot.getId());
	            dto.setTotalSlots(spot.getTotalSlots());
	            return dto;
	        }).filter(spot -> spot.getDistance() < 5.0) // Filter spots within 5 km
	          .sorted((a, b) -> Double.compare(a.getDistance(), b.getDistance()))
	          .collect(Collectors.toList());
	    }

	    private double[] getCoordinates(String address) {
	        String url = "https://nominatim.openstreetmap.org/search?format=json&q=" + address.replace(" ", "+");
	        NominatimResponse[] response = restTemplate.getForObject(url, NominatimResponse[].class);
	        if (response != null && response.length > 0) {
	            return new double[]{Double.parseDouble(response[0].lat), Double.parseDouble(response[0].lon)};
	        }
	        return new double[]{0.0, 0.0};
	    }

	    private double haversine(double lat1, double lon1, double lat2, double lon2) {
	        final int R = 6371; // Radius of Earth in km
	        double dLat = Math.toRadians(lat2 - lat1);
	        double dLon = Math.toRadians(lon2 - lon1);
	        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
	                   Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *
	                   Math.sin(dLon / 2) * Math.sin(dLon / 2);
	        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
	        return R * c; // Distance in km
	    }


		@Override
		public List<ParkingSpace> getAllParkingSpaces() {
			// TODO Auto-generated method stub
			return parkingSpaceRepo.findAll();
		}


		  public ParkingSpace updateParkingSpace(Long id, Long ownerId, ParkingSpace updatedDetails) {
			  ParkingOwner owner=parkingOwnerRepo.findById(ownerId).get();
		        ParkingSpace existing = parkingSpaceRepo.findByIdAndParkingowner(id,owner )
		                .orElseThrow(() -> new RuntimeException("Parking space not found"));
                existing.setLotName(updatedDetails.getLotName());
                existing.setNumberOfFloors(updatedDetails.getNumberOfFloors());
		        existing.setAddress(updatedDetails.getAddress());
		        existing.setTotalSlots(updatedDetails.getTotalSlots());
		      

		        return parkingSpaceRepo.save(existing);
		    }


		@Override
		public ParkingSpace updatePricingAndTime(String lotName, LocalTime availableFrom, LocalTime availableTo,
				Double pricingPerHour) {
			// TODO Auto-generated method stub
			System.out.println(pricingPerHour);
			ParkingSpace parkingSpace=parkingSpaceRepo.findByLotName(lotName);
			if(parkingSpace != null) {
				parkingSpace.setAvailableFrom(availableFrom)
				;
				parkingSpace.setAvailableTo(availableTo);
				parkingSpace.setPricingPerHour(pricingPerHour);
				return parkingSpaceRepo.save(parkingSpace);
				
			}
			return null;
		}
			
		
}
